# client is required by the cif, cif_ping, and cif_smrt
[client]
# the apikey for your client
apikey = CONFIG_ME!
driver = RabbitMQ
#driver = Direct

[client_rabbitmq]
host = localhost
port = 5672
username = guest
password = guest
vhost = /cif

# cif_smrt is required by cif_smrt
[cif_smrt]
# change example.com to your local domain and hostname respectively
# this identifies the data in your instance and ties it to your specific instance in the event
# that you start sharing with others
#name = example.com
#instance = cif.example.com
name = local
instance = cif-vm.local

# the apikey for cif_smrt
apikey = CONFIG_ME!

[query_handler]
# This specifies the name of the modules that implements our query handler. 
driver = "CIF::Postgres::QueryHandler"

# These are query handler specific attributes
host = '127.0.0.1'
user = 'postgres'
password = ''
database = 'cif'

[auth]
# This specifies the name of the modules that implements our authentication. 
driver = "CIF::Postgres::Auth"

# These are auth specific attributes
host = '127.0.0.1'
user = 'postgres'
password = ''
database = 'cif'

[datastore]
# The number of events that trigger an immediate commit by the flusher.
commit_size = 500

# After commit_interval seconds, trigger a commit if we have less than 
# commit_size events
commit_interval = 2 

# This specifies the name of the modules that implements our datastore. 
driver = "CIF::Postgres::DataStore"

# These are datastore specific attributes
host = '127.0.0.1'
user = 'postgres'
password = ''
database = 'cif'

[router]
# set to 0 if it's too noisy and reload the cif-router (apache), only on for RC2
debug = 1
auth_cache_ageoff = 60
# Number of seconds between commits.

[router_server]
driver = RabbitMQ
debug = 1

[router_server_rabbitmq]
host = localhost
port = 5672
username = guest
password = guest
vhost = /cif
prefetch_count = 500
